{"version":3,"sources":["redux/reducer/user.js","redux/reducer/index.js","redux/store.js","redux/action/user.js","pages/users/DetailUser.js","pages/users/ReposUser.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["initState","isLoading","isError","users","user","repos","state","action","type","payload","data","reducer","combineReducers","logger","createLogger","store","createStore","rootReducer","applyMiddleware","promiseMiddleware","getUser","username","axios","get","getRepos","connect","props","useEffect","match","params","a","async","dispatch","className","style","width","height","src","avatar_url","alt","login","name","public_repos","followers","following","bio","map","v","i","key","toString","href","html_url","target","full_name","Navbar","to","data-toggle","data-target","aria-controls","id","App","path","component","ReposUser","DetailUser","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3cdcee1.chunk.js","sourcesContent":["const initState = {\n\tisLoading: false,\n\tisError: false,\n\tusers: [],\n\tuser: {},\n\trepos: [],\n}\n\nconst user = (state = initState, action) => {\n\tswitch (action.type) {\n\t\tcase 'GET_USERS_PENDING':\n\t\t\treturn {\n\t\t\t\tisLoading: true,\n\t\t\t}\n\t\tcase 'GET_USERS_REJECTED':\n\t\t\treturn {\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: true,\n\t\t\t}\n\t\tcase 'GET_USERS_FULFILLED':\n\t\t\treturn {\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: false,\n\t\t\t\tusers: action.payload.data,\n\t\t\t}\n\t\tcase 'GET_USER_PENDING':\n\t\t\treturn {\n\t\t\t\tisLoading: true,\n\t\t\t}\n\t\tcase 'GET_USER_REJECTED':\n\t\t\treturn {\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: true,\n\t\t\t}\n\t\tcase 'GET_USER_FULFILLED':\n\t\t\treturn {\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: false,\n\t\t\t\tuser: action.payload.data,\n\t\t\t}\n\t\tcase 'GET_REPOS_PENDING':\n\t\t\treturn {\n\t\t\t\tisLoading: true,\n\t\t\t}\n\t\tcase 'GET_REPOS_REJECTED':\n\t\t\treturn {\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: true,\n\t\t\t}\n\t\tcase 'GET_REPOS_FULFILLED':\n\t\t\treturn {\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: false,\n\t\t\t\trepos: action.payload.data,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default user\n","import { combineReducers } from 'redux'\n\n// Reducer\nimport user from './user'\n\nconst reducer = combineReducers({\n\tuser,\n})\n\nexport default reducer\n","import { createStore, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport promiseMiddleware from 'redux-promise-middleware'\n\n// Reducer\nimport rootReducer from './reducer'\n\nconst logger = createLogger({})\n\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(logger, promiseMiddleware)\n)\n\nexport default store\n","import axios from 'axios'\n\nexport const getUsers = () => {\n\treturn {\n\t\ttype: 'GET_USERS',\n\t\tpayload: axios.get('https://api.github.com/users'),\n\t}\n}\n\nexport const getUser = username => {\n\treturn {\n\t\ttype: 'GET_USER',\n\t\tpayload: axios.get(`https://api.github.com/users/${username}`),\n\t}\n}\n\nexport const getRepos = username => {\n\treturn {\n\t\ttype: 'GET_REPOS',\n\t\tpayload: axios.get(`https://api.github.com/users/${username}/repos`),\n\t}\n}\n","import React, { useEffect, Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\n// Action\nimport { getUser, getRepos } from '../../redux/action/user'\n\nconst DetailUser = props => {\n\tconst getData = async username => {\n\t\tawait props.dispatch(getUser(username))\n\t}\n\n\tuseEffect(() => {\n\t\tgetData(props.match.params.username)\n\t}, [])\n\n\tlet data = props.user\n\tlet repos = `/${props.match.params.username}/repos`\n\n\treturn (\n\t\t<Fragment>\n\t\t\t{data.isLoading && !data.user && (\n\t\t\t\t<div\n\t\t\t\t\tclassName='d-flex'\n\t\t\t\t\tstyle={{ width: '100vw', height: '100vh' }}\n\t\t\t\t>\n\t\t\t\t\t<div className='align-selft-center'>\n\t\t\t\t\t\t<p>Loading</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{!data.isLoading && data.user && (\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<div className='card mb-4'>\n\t\t\t\t\t\t<div className='row no-gutters'>\n\t\t\t\t\t\t\t<div className='col-md-4'>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc={data.user.avatar_url}\n\t\t\t\t\t\t\t\t\tclassName='card-img'\n\t\t\t\t\t\t\t\t\talt={data.user.login}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='col-md-8'>\n\t\t\t\t\t\t\t\t<div className='card-body'>\n\t\t\t\t\t\t\t\t\t<h5 className='card-title'>\n\t\t\t\t\t\t\t\t\t\t{data.user.name}\n\t\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t\t<p className='card-text'>\n\t\t\t\t\t\t\t\t\t\tPubli Repos: {data.user.public_repos}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className='card-text'>\n\t\t\t\t\t\t\t\t\t\tFollowers: {data.user.followers}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className='card-text'>\n\t\t\t\t\t\t\t\t\t\tFollowing: {data.user.following}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className='card-text'>\n\t\t\t\t\t\t\t\t\t\tDescription: {data.user.bio}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Fragment>\n\t)\n}\n\nconst mapStateToProps = state => ({\n\tuser: state.user,\n})\n\nexport default connect(mapStateToProps)(DetailUser)\n","import React, { useEffect, Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\n// Action\nimport { getRepos } from '../../redux/action/user'\n\nconst ReposUser = props => {\n\tconst getData = async username => {\n\t\tawait props.dispatch(getRepos(username))\n\t}\n\n\tuseEffect(() => {\n\t\tgetData(props.match.params.username)\n\t}, [])\n\n\treturn (\n\t\t<Fragment>\n\t\t\t{props.user.isLoading && !props.user.repos && (\n\t\t\t\t<div\n\t\t\t\t\tclassName='d-flex'\n\t\t\t\t\tstyle={{ width: '100vw', height: '100vh' }}\n\t\t\t\t>\n\t\t\t\t\t<div className='align-selft-center'>\n\t\t\t\t\t\t<p>Loading</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className='container'>\n\t\t\t\t<ul className='list-group list-group-flush'>\n\t\t\t\t\t{!props.user.isLoading &&\n\t\t\t\t\t\tprops.user.repos.map((v, i) => (\n\t\t\t\t\t\t\t<li key={i.toString()} className='list-group-item'>\n\t\t\t\t\t\t\t\t<a href={v.html_url} target='_blank'>\n\t\t\t\t\t\t\t\t\t{v.full_name}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nconst mapStateToProps = state => ({\n\tuser: state.user,\n})\n\nexport default connect(mapStateToProps)(ReposUser)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Navbar = () => {\n\treturn (\n\t\t<nav className='navbar navbar-expand-lg navbar-dark bg-primary mb-4'>\n\t\t\t<div className='container'>\n\t\t\t\t<Link to='/' className='navbar-brand'>\n\t\t\t\t\tGithuber\n\t\t\t\t</Link>\n\t\t\t\t<button\n\t\t\t\t\tclassName='navbar-toggler'\n\t\t\t\t\tdata-toggle='collapse'\n\t\t\t\t\tdata-target='#NavbarMenu'\n\t\t\t\t\taria-controls='NavbarMenu'\n\t\t\t\t>\n\t\t\t\t\t<span className='navbar-toggler-icon'></span>\n\t\t\t\t</button>\n\n\t\t\t\t<div className='collapse navbar-collapse' id='NavbarMenu'>\n\t\t\t\t\t<ul className='navbar-nav ml-auto'>\n\t\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t\t<Link to='/' className='nav-link'>\n\t\t\t\t\t\t\t\tHome\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</nav>\n\t)\n}\n\nexport default Navbar\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\n// Store\nimport store from './redux/store'\n\n// Pages\nimport DetailUser from './pages/users/DetailUser'\nimport ReposUser from './pages/users/ReposUser'\n\n// Components\nimport Navbar from './components/Navbar'\n\nconst App = () => {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<Navbar />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/:username/repos' component={ReposUser} />\n\t\t\t\t\t<Route path='/:username' component={DetailUser} />\n\t\t\t\t</Switch>\n\t\t\t</BrowserRouter>\n\t\t</Provider>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'jquery/dist/jquery.min.js'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}